/*
* @Author: mark
* @Date:   2017-03-09 15:50:03
* @Last Modified by:   mark
* @Last Modified time: 2017-03-14 18:50:48
*/

var drops = function(el,callback){
	console.log(el.classList)
	this.contain = el;
	this.distance = 50;
	this.attachEvents(callback);
}

drops.prototype = {

	/**
	 * *是否触屏版
	 * @return {[type]} [description]
	 */
	support: function(){
		return !!(("ontouchstart" in window) || window.DocumentTouch && document instanceof window.DocumentTouch)
	},

	/**
	 * *获取数模事件
	 * @return {[type]} [description]
	 */
	touchEvents: function(){
		return {
			start: this.support() ? 'touchstart' : 'mousedown',
			move: this.support() ? 'touchmove' : 'mousemove',
			end: this.support() ? 'touchend' : 'mouseup',
		}
	},

	/**
	 * *获取坐标
	 * @param  {[type]} e [description]
	 * @return {[type]}   [description]
	 */
	getTouchPosition: function(e){
	
		if (this.support()) {
			return {
				x: e.targetTouches[0].pageX,
				y: e.targetTouches[0].pageY
			}
		}else{
			return {
				x: e.pageX,
                y: e.pageY
			}
		}
	},

	/**
	 * *开始触摸事件
	 * @param  {[type]} e [description]
	 * @return {[type]}   [description]
	 */
	touchStart: function(e){
		if (this.contain.classList.contains('refreshing')) {return};
		var p = this.getTouchPosition(e);
		this.start = p;
		this.diffY = 0;
	},

	/**
	 * *触摸移动事件
	 * @param  {[type]} e [description]
	 * @return {[type]}   [description]
	 */
	touchMove: function(e){
		if (this.contain.classList.contains('refreshing') || !this.start || (this.contain.scrollTop > 0)) return;
		var p  = this.getTouchPosition(e);
		this.diffY = p.y - this.start.y;
		if (this.diffY < 0) return;
		this.contain.classList.add('touching');
		e.preventDefault();
    	e.stopPropagation();
    	this.diffY = Math.pow(this.diffY, 0.8);
    	console.log(this.odiv.firstChild)
    	this.odiv.firstChild.style.height=this.diffY+'px';
    	var list = this.contain.classList;
		if (this.diffY < this.distance) {
			list.remove("pull-up");
			list.add("pull-down");	
		}else{
			list.remove("pull-down");
			list.add("pull-up");
		}
		return false;
	},

	/**
	 * *触摸离开事件
	 * @return {[type]} [description]
	 */
	touchEnd: function(callback){
		this.start = false;
		if (this.diffY <= 0 || this.contain.classList.contains('refreshing')) return;
		var list = this.contain.classList;
			list.remove("touching");
			list.remove("pull-down");
			list.remove("pull-up");
		if (Math.abs(this.diffY) <= this.distance) {
			this.odiv.firstChild.style.height='0px';
		}else{
			this.odiv.firstChild.style.height=this.distance+'px';
			list.add("refreshing");
			this.refresh(callback);
		}
		return false;
	},

	/**
	 * *松手后执行的方法
	 * @param  {Function} callback [description]
	 * @return {[type]}            [description]
	 */
	refresh:function(callback){
		if (callback) callback();

	},

	/**
	 * *事件初始化
	 * @return {[type]} [description]
	 */
	attachEvents: function(callback){
		var el = this.contain;
		el.classList.add('dropload');

		var tpl = ['<div class="dropload-layer">', '<div class="inner">','<div class="arrow"></div>',
        '<div class="loader"></div>', '<div class="down">下拉刷新</div>',
        '<div class="up">释放刷新</div>', '<div class="refresh">正在刷新</div></div></div>'];
        this.odiv = document.createElement('div');
        this.odiv.innerHTML = tpl.join('');
        el.insertBefore(this.odiv,el.firstChild);
    	el.addEventListener(this.touchEvents().start, this.touchStart.bind(this), this,false);
    	el.addEventListener(this.touchEvents().move, this.touchMove.bind(this), this,false);
    	el.addEventListener(this.touchEvents().end, this.touchEnd.bind(this,callback), this,false);

	},

	/**
	 * *下拉刷新松手
	 * @return {[type]} [description]
	 */
	pullToRefreshDone: function() {
		this.contain.classList.remove("refreshing"); //移除
    	this.contain.querySelector('.dropload-layer').style.height="0px";
	}
}



